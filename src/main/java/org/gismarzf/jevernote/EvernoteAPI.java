package org.gismarzf.jevernote;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.stream.XMLStreamException;

import org.apache.tika.config.TikaConfig;
import org.apache.tika.mime.MimeTypeException;

import com.ctc.wstx.stax.WstxOutputFactory;
import com.evernote.auth.EvernoteAuth;
import com.evernote.auth.EvernoteService;
import com.evernote.clients.ClientFactory;
import com.evernote.clients.NoteStoreClient;
import com.evernote.clients.UserStoreClient;
import com.evernote.edam.error.EDAMNotFoundException;
import com.evernote.edam.error.EDAMSystemException;
import com.evernote.edam.error.EDAMUserException;
import com.evernote.edam.notestore.NoteFilter;
import com.evernote.edam.type.Note;
import com.evernote.edam.type.NoteSortOrder;
import com.evernote.edam.type.Notebook;
import com.evernote.edam.type.Resource;
import com.evernote.thrift.TException;
import com.evernote.thrift.transport.TTransportException;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.syncthemall.enml4j.ENMLProcessor;

public class EvernoteAPI {

	private List<Note> notes;
	private NoteStoreClient noteStore;

	private Map<String, URL> pathToNotesIndexHTML = Maps
		.newHashMap();

	private UserStoreClient userStore;

	private static final String AUTH_TOKEN =
		"S=s1:U=8b9d6:E=149a4d264f3:C=1424d2138f4:P=1cd:"
			+ "A=en-devtoken:V=2:H=b91f9552fe434cef234885ebe369586b";

	// Used in this demo as a convenient way to map file extension to mime type
	private static TikaConfig config = TikaConfig
		.getDefaultConfig();
	private static final String downloadFolder = "./evernotes";
	private static ENMLProcessor ENMLProcessor;

	/**
	 * Save the binary content of Notes Resources as Files in the download folder.
	 * The HTML file generated by ENML4j will references this files. This methods
	 * is used only a a demo. ENML4j can creates HTML files referencing any by URL
	 * (on a web server, FTP server, file hosting service etc...
	 */
	private static void saveAttachement(Note note)
		throws EDAMUserException, EDAMSystemException,
		EDAMNotFoundException, TException, IOException,
		MimeTypeException {

		// make folder for this note
		File noteDirectory =
			new File(downloadFolder + "/" + note.getGuid());

		noteDirectory.mkdir();

		if (note.getResources() != null) {
			for (Resource resource : note.getResources()) {

				String attachementPath =
					noteDirectory
						+ "/"
						+ resource.getGuid()
						+ config.getMimeRepository()
							.forName(resource.getMime()).getExtension();

				BufferedOutputStream bos =
					new BufferedOutputStream(new FileOutputStream(
						attachementPath));

				bos.write(resource.getData().getBody());
				bos.flush();
				bos.close();
			}
		}
	}

	public void createParentFolder() {
		// create folder for evernotes
		File parentNoteDirectory = new File(downloadFolder);
		parentNoteDirectory.mkdir();
	}

	/**
	 * Retrieve a list of the user's notes (only metadata)
	 */
	public void downloadNotes(String searchString, int maxNotes)
		throws Exception {

		// TODO is only searching in first notebook
		Notebook notebook = noteStore.listNotebooks().get(0);

		NoteFilter filter = new NoteFilter();

		filter.setNotebookGuid(notebook.getGuid());
		filter.setWords(searchString);
		filter.setOrder(NoteSortOrder.CREATED.getValue());
		filter.setAscending(true);

		List<Note> noteList = Lists.newArrayList();

		for (Note note : noteStore.findNotes(filter, 0, maxNotes)
			.getNotes()) {
			noteList.add(note);
		}

		this.notes = noteList;

	}

	public URL getNoteHTMLContentPath(Note note) {
		return getPathToNotesIndexHTML().get(note.getGuid());
	}

	public List<Note> getNotes() {
		return notes;
	}

	public Map<String, URL> getPathToNotesIndexHTML() {
		return pathToNotesIndexHTML;
	}

	public void saveNoteToDisk(Note note) {

		File noteDirectory =
			new File(downloadFolder + "/" + note.getGuid());

		noteDirectory.mkdir();

		try {

			// Get the Note with it's content and resources data
			note =
				noteStore.getNote(note.getGuid(), true, true, false,
					false);

			// Save the Note attachments (the binary files) in the
			// download folder
			saveAttachement(note);

			// Creates the mapping between the binary files URL and the
			// Resources GUID
			Map<String, String> mapHashtoURL =
				new HashMap<String, String>();

			if (note.getResources() != null) {
				for (Resource resource : note.getResources()) {

					String attachementPath =
						"./"
							+ resource.getGuid()
							+ config.getMimeRepository()
								.forName(resource.getMime()).getExtension();

					mapHashtoURL.put(resource.getGuid(), attachementPath);
				}
			}

			File pathToHTML =
				new File(noteDirectory + "/" + "index" + ".html");

			FileOutputStream fos = new FileOutputStream(pathToHTML);

			ENMLProcessor.noteToHTML(note, mapHashtoURL, fos);
			pathToNotesIndexHTML.put(note.getGuid(), pathToHTML
				.getAbsoluteFile().toURI().toURL());

		} catch (EDAMUserException | EDAMSystemException
			| EDAMNotFoundException | TException e) {
			e.printStackTrace();
		} catch (MimeTypeException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (XMLStreamException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Authenticates and sets the noteStore field
	 */
	public void setUp() {

		// Set up the UserStore client and check that we can speak to the server
		EvernoteAuth evernoteAuth =
			new EvernoteAuth(EvernoteService.SANDBOX, AUTH_TOKEN);

		ClientFactory factory = new ClientFactory(evernoteAuth);

		try {
			userStore = factory.createUserStoreClient();
		} catch (TTransportException e) {
			System.out.println("Couldn't create evernote userStore..");
			e.printStackTrace();
		}

		boolean versionOk;

		try {

			versionOk =
				userStore
					.checkVersion(
						"Evernote EDAMDemo (Java)",
						com.evernote.edam.userstore.Constants.EDAM_VERSION_MAJOR,
						com.evernote.edam.userstore.Constants.EDAM_VERSION_MINOR);

			if (!versionOk) {
				System.err
					.println("Incompatible Evernote client protocol version");
				System.exit(1);
			}

		} catch (TException e) {
			System.out.println("Couldn't check version..");
			e.printStackTrace();
		}

		// Set up the NoteStore client
		try {
			noteStore = factory.createNoteStoreClient();
		} catch (EDAMUserException | EDAMSystemException
			| TException e) {
			System.out.println("Couldn't create evernote noteStore..");
			e.printStackTrace();
		}

		setUpENMLProcessor();

	}

	public void setUpENMLProcessor() {

		// Uses Woodstox has a the stAX implementation
		System.setProperty("javax.xml.stream.XMLInputFactory",
			"com.ctc.wstx.stax.WstxInputFactory");
		System.setProperty("javax.xml.stream.XMLOutputFactory",
			"com.ctc.wstx.stax.WstxOutputFactory");
		System.setProperty("javax.xml.stream.XMLEventFactory",
			"com.ctc.wstx.stax.WstxEventFactory");

		// Creates an ENMLProcessor with default converters
		ENMLProcessor = new ENMLProcessor();

		// Set the property P_AUTOMATIC_EMPTY_ELEMENTS to false to write HTML
		// with explicit closing tags to works better
		// with browser.
		((WstxOutputFactory) ENMLProcessor.getOutputFactory())
			.setProperty(WstxOutputFactory.P_AUTOMATIC_EMPTY_ELEMENTS,
				false);
	}

}
