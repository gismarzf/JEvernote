/**
 * The MIT License
 *
 * Copyright (c) 2012 Sripathi Krishnan
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.gismarzf.jevernote;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.stream.XMLStreamException;

import org.apache.tika.config.TikaConfig;
import org.apache.tika.mime.MimeTypeException;

import com.ctc.wstx.stax.WstxOutputFactory;
import com.evernote.clients.NoteStoreClient;
import com.evernote.edam.error.EDAMNotFoundException;
import com.evernote.edam.error.EDAMSystemException;
import com.evernote.edam.error.EDAMUserException;
import com.evernote.edam.type.Note;
import com.evernote.edam.type.Resource;
import com.evernote.thrift.TException;
import com.google.common.collect.Maps;
import com.syncthemall.enml4j.ENMLProcessor;

public class ENML4jAPI {

	private NoteStoreClient noteStore;

	private Map<String, URL> pathToNotesIndexHTML = Maps
		.newHashMap();

	public ENML4jAPI() {

		// Uses Woodstox has a the stAX implementation
		System.setProperty("javax.xml.stream.XMLInputFactory",
			"com.ctc.wstx.stax.WstxInputFactory");
		System.setProperty("javax.xml.stream.XMLOutputFactory",
			"com.ctc.wstx.stax.WstxOutputFactory");
		System.setProperty("javax.xml.stream.XMLEventFactory",
			"com.ctc.wstx.stax.WstxEventFactory");

		// Creates an ENMLProcessor with default converters
		ENMLProcessor = new ENMLProcessor();

		// Set the property P_AUTOMATIC_EMPTY_ELEMENTS to false to write HTML
		// with explicit closing tags to works better
		// with browser.
		((WstxOutputFactory) ENMLProcessor.getOutputFactory())
			.setProperty(WstxOutputFactory.P_AUTOMATIC_EMPTY_ELEMENTS,
				false);
	}

	// Used in this demo as a convenient way to map file extension to mime type
	private static TikaConfig config = TikaConfig
		.getDefaultConfig();

	private static final String downloadFolder = "./evernotes";

	private static ENMLProcessor ENMLProcessor;

	/**
	 * Save the binary content of Notes Resources as Files in the download folder.
	 * The HTML file generated by ENML4j will references this files. This methods
	 * is used only a a demo. ENML4j can creates HTML files referencing any by URL
	 * (on a web server, FTP server, file hosting service etc...
	 */
	private static void saveAttachement(Note note)
		throws EDAMUserException, EDAMSystemException,
		EDAMNotFoundException, TException, IOException,
		MimeTypeException {

		// make folder for this note
		File noteDirectory =
			new File(downloadFolder + "/" + note.getGuid());

		noteDirectory.mkdir();

		if (note.getResources() != null) {
			for (Resource resource : note.getResources()) {

				String attachementPath =
					noteDirectory
						+ "/"
						+ resource.getGuid()
						+ config.getMimeRepository()
							.forName(resource.getMime()).getExtension();

				BufferedOutputStream bos =
					new BufferedOutputStream(new FileOutputStream(
						attachementPath));

				bos.write(resource.getData().getBody());
				bos.flush();
				bos.close();
			}
		}
	}

	public Map<String, URL> getPathToNotesIndexHTML() {
		return pathToNotesIndexHTML;
	}

	public void saveNotesToDisk(List<Note> noteList) {

		// TODO wtd if parent folder exists
		createParentFolder();

		for (Note note : noteList) {

			// Create a folder in the download folder to save the HTML
			// file generated by ENML4j
			File noteDirectory =
				new File(downloadFolder + "/" + note.getGuid());
			noteDirectory.mkdir();

			try {

				// Get the Note with it's content and resources data
				note =
					noteStore.getNote(note.getGuid(), true, true, false,
						false);

				// Save the Note attachments (the binary files) in the
				// download folder
				saveAttachement(note);

				// Creates the mapping between the binary files URL and the
				// Resources GUID
				Map<String, String> mapHashtoURL =
					new HashMap<String, String>();

				if (note.getResources() != null) {
					for (Resource resource : note.getResources()) {

						String attachementPath =
							"./"
								+ resource.getGuid()
								+ config.getMimeRepository()
									.forName(resource.getMime()).getExtension();

						mapHashtoURL
							.put(resource.getGuid(), attachementPath);
					}
				}

				File pathToHTML =
					new File(noteDirectory + "/" + "index" + ".html");

				FileOutputStream fos = new FileOutputStream(pathToHTML);

				ENMLProcessor.noteToHTML(note, mapHashtoURL, fos);
				pathToNotesIndexHTML.put(note.getGuid(), pathToHTML
					.getAbsoluteFile().toURI().toURL());

			} catch (EDAMUserException | EDAMSystemException
				| EDAMNotFoundException | TException e) {
				e.printStackTrace();
			} catch (MimeTypeException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			} catch (XMLStreamException e) {
				e.printStackTrace();
			}
		}
	}

	public void setNoteStore(NoteStoreClient noteStore) {
		this.noteStore = noteStore;
	}

	private void createParentFolder() {

		// create folder for evernotes
		File parentNoteDirectory = new File(downloadFolder);
		parentNoteDirectory.mkdir();

	}

}
